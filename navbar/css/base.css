/*::before and ::after pseudo-elements in CSS allows you to insert content onto a page without it needing to be in the HTML.
While the end result is not actually in the DOM, it appears on the page as if it is*/
*,
*::after,
*::before {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}


section {
  margin: 0;
  color: #111;
  background-color: #f8ecde;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: sofia-pro, sans-serif;
}


a {
  text-decoration: none;
  color: #b19e7f;
  outline: none;
}

a:hover,
a:focus {
  color: #111;
  outline: none;
}

.menu {
  padding: 10vh 0 25vh;
  counter-reset: menu;
}

.menu__item {
  cursor: default;
  position: relative;
  padding: 0 5vw;
}
/*WebKit is a framework that displays properly-formatted webpages based on their markup.
Apple Safari depends on WebKit, and so do many mobile browsers (since WebKit is highly portable and customizable).*/
.menu__item-link {
  display: inline-block;
  cursor: pointer;
  position: relative;
  -webkit-text-stroke: 1.5px #000;
  -webkit-text-stroke: 1.5px #000;
  -webkit-text-fill-color: transparent;
  color: transparent;
  transition: opacity 0.4s;
}


.menu__item-link:hover {
  transition-duration: 0.1s;
  opacity: 0;
}

/*The translate3d() CSS function repositions an element in 3D space. Syntax: translate3d(tx, ty, tz)
The rotate3d() CSS function defines a transformation that rotates an element around a fixed axis in 3D space, without deforming it.
Syntax: rotate3d(x, y, z, a) (a is angle of rotation)*/


/*The mix-blend-mode CSS property sets how an element's content should blend with the content of the element's parent and the element's background.*/
.marquee {
  position: absolute;
  top: 0;
  left: 0;
  width: 100vw;
  overflow: hidden;
  pointer-events: none;
  mix-blend-mode: color-burn;
}

/*width: fit content; the box will use the available space, but never more than max-content*/
.marquee__inner {
  width: fit-content;
  display: flex;
  position: relative;
  transform: translate3d(calc(-25% + 20vw), 0, 0);
  animation: marquee 5s linear infinite;
  opacity: 0;
  transition: opacity 0.1s;
}

/*Tilde: The elements represented by the two sequences share the same parent in the document tree.
It is used to select all the second sequences which are preceded by the first sequence (not necessarily immediately)
or in simple words selects all elements that are siblings of a specified element*/
.menu__item-link:hover ~ .marquee .marquee__inner {
  animation-play-state: running;
  opacity: 1;
  transition-duration: 0.4s;
}

.marquee span {
  text-align: center;
}

.menu__item-link,
.marquee span {
  white-space: nowrap;
  font-size: 10vw;
  padding: 0 1vw;
  font-weight: 900;
  line-height: 1.15;
}

.marquee span {
  font-style: italic;
}

@keyframes marquee {
  0% {
    transform: translate3d(calc(-25% + 20vw), 0, 0);
  }

  100% {
    transform: translate3d(calc(-50% + 20vw), 0, 0);
  }
}

.wrapper {
  position: fixed;
  top: 0;
  right: -100%;
  height: 100%;
  width: 100%;
  background: #eee;
  transition: all 0.6s ease-in-out;
}
#active:checked ~ .wrapper {
  right: 0;
}
.menu-btn {
  position: absolute;
  z-index: 2;
  right: 20px;
  top: 20px;
  height: 50px;
  width: 50px;
  text-align: center;
  line-height: 50px;
  border-radius: 50%;
  font-size: 20px;
  cursor: pointer;
  transition: all 0.3s ease-in-out;
}
.menu-btn span,
.menu-btn:before,
.menu-btn:after {
  content: "";
  position: absolute;
  top: calc(50% - 1px);
  left: 30%;
  width: 40%;
  border-bottom: 2px solid #000;
  transition: transform 0.6s cubic-bezier(0.215, 0.61, 0.355, 1);
}
.menu-btn:before {
  transform: translateY(-8px);
}
.menu-btn:after {
  transform: translateY(8px);
}

.close {
  z-index: 1;
  width: 100%;
  height: 100%;
  pointer-events: none;
  transition: background 0.6s;
}

/* closing animation */
#active:checked + .menu-btn span {
  transform: scaleX(0);
}
#active:checked + .menu-btn:before {
  transform: rotate(45deg);
  border-color: #fff;
}
#active:checked + .menu-btn:after {
  transform: rotate(-45deg);
  border-color: #fff;
}

input[type="checkbox"] {
  display: none;
}

#active:checked ~ .wrapper ul li a {
  opacity: 1;
}

#active:checked ~ .wrapper ul li a {
  transform: none;
  transition-timing-function: ease, cubic-bezier(0.1, 1.3, 0.3, 1); /* easeOutBack */
  transition-delay: 0.6s;
  transform: translateX(-100px);
}
